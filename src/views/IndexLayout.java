/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import java.lang.reflect.InvocationTargetException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.Image;

import constants.Config;
import controllers.JavaScriptController;
import helpers.ImageHelper;
import netscape.javascript.JSObject;

/**
 *
 * @author ADMIN
 */
public class IndexLayout extends javax.swing.JFrame {

    protected BrowserView mBrowserView;
    protected JavaScriptController mJavaScriptController;
    protected LayoutListener mLayoutListener;
    
    /**
     * Creates new form MainFrame
     */
    public IndexLayout() {
        // set maximize
        setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        
        // Initialize
        initComponents();
        
        // Initialize and add BrowserView to jPanelMain
        initWebView();
        
        // Layout listener
        addComponentListener(new ComponentAdapter() {
            @Override
            public void componentShown(ComponentEvent e) {
                if (mLayoutListener != null)
                    mLayoutListener.onLayoutShown();
            }

            @Override
            public void componentHidden(ComponentEvent e) {
                if (mLayoutListener != null)
                    mLayoutListener.onLayoutHidden();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelMain = new javax.swing.JPanel();
        jPanelBottom = new javax.swing.JPanel();
        jLabelStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Telemed");

        jPanelMain.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanelMain.setLayout(new java.awt.BorderLayout());

        jLabelStatus.setText("Telemed Biometric Capture");

        javax.swing.GroupLayout jPanelBottomLayout = new javax.swing.GroupLayout(jPanelBottom);
        jPanelBottom.setLayout(jPanelBottomLayout);
        jPanelBottomLayout.setHorizontalGroup(
            jPanelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBottomLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabelStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 683, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );
        jPanelBottomLayout.setVerticalGroup(
            jPanelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBottomLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabelStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanelBottom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelMain, javax.swing.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jPanelBottom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    protected void initWebView() {
        mBrowserView = new BrowserView(jPanelMain, Config.TELEMED_URL);
        mBrowserView.setPageStateListener(new BrowserView.PageStateListener() {
            @Override
            public void onPageStateReady(String url) {
                
            }

            @Override
            public void onPageStateScheduled(String url) {
                
            }

            @Override
            public void onPageStateRunning(String url) {
                
            }

            @Override
            public void onPageStateSucceeded(String url) {
                mBrowserView.executeScript("window", new BrowserView.ExecuteScriptListener() {
                    @Override
                    public void onExecutedScript(Object result) {
                        // Attach app variable to page
                        JSObject jsObject = (JSObject) result;
                        jsObject.setMember("app", mJavaScriptController);
                        
                        // Send ready flag to app_ready() function
                        mBrowserView.executeScript("app_ready()");
                    }
                });
            }

            @Override
            public void onPageStateCancelled(String url) {
                
            }

            @Override
            public void onPageStateFailed(String url) {
                
            }

            @Override
            public void onPagePopupOpen(String url) {
                mBrowserView.openDocument(url);
            }
        });
    }
    
    public void setJavaScriptController(final JavaScriptController javaScriptController) {
        mJavaScriptController = javaScriptController;
    }
    
    public void setLayoutListener(final LayoutListener layoutListener) {
        mLayoutListener = layoutListener;
    }
    
    public static IndexLayout CreateLayout() {
        LayoutCreator layoutCreator = new LayoutCreator();
        
        try {
            SwingUtilities.invokeAndWait(layoutCreator);
        } catch (InterruptedException ex) {
            Logger.getLogger(IndexLayout.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(IndexLayout.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return layoutCreator.getLayout();
    }
    
    protected static class LayoutCreator implements Runnable {
        protected IndexLayout mLayout;
        
        @Override
        public void run() {
            mLayout = new IndexLayout();
            mLayout.setVisible(true);
        }
        
        public IndexLayout getLayout() {
            return mLayout;
        }
    }
    
    public BrowserView getBrowserView() {
        return mBrowserView;
    }
    
    public void setStatus(final String status) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                jLabelStatus.setText(status);
            }
        });
    }
    
    public void setResponseFingerCaptureStatus(final boolean isStarted) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                if (mBrowserView != null)
                    mBrowserView.executeScript("app_response_finger_capture_status(" + String.valueOf(isStarted) + ")");
            }
        });
    }
    
    public void setResponseFingerCaptureStart(final boolean isStarted) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                if (mBrowserView != null)
                    mBrowserView.executeScript("app_response_finger_capture_start(" + String.valueOf(isStarted) + ")");
            }
        });
    }
    
    public void setResponseFingerCaptureStop(final boolean isStopped) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                if (mBrowserView != null)
                    mBrowserView.executeScript("app_response_finger_capture_stop(" + String.valueOf(isStopped) + ")");
            }
        });
    }
    
    public void setResponseFingerCaptured(final Image image) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                String imageString = ImageHelper.jpegToBase64(image); 
                if (imageString != null && mBrowserView != null)
                    mBrowserView.executeScript("app_response_finger_captured(\"" + imageString + "\", \"JPEG\")");
            }
        });
    }
    
    public void setResponseFingerImageBase64(final Image image) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                String imageString = ImageHelper.jpegToBase64(image); 
                if (imageString != null && mBrowserView != null)
                    mBrowserView.executeScript("app_response_finger_image(\"" + imageString + "\", \"JPEG\")");
            }
        });
    }
    
    public void setResponseTemplateBase64(final String template) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                if (mBrowserView != null)
                    mBrowserView.executeScript("app_response_template(\"" + template + "\")");
            }
        });
    }
    
    public void setResponseIdentify(final String identifyResult) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                if (mBrowserView != null)
                    mBrowserView.executeScript("app_response_identify(\"" + identifyResult + "\")");
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JPanel jPanelBottom;
    private javax.swing.JPanel jPanelMain;
    // End of variables declaration//GEN-END:variables

    public interface LayoutListener {
        void onLayoutShown();
        void onLayoutHidden();
    }
}
